name: "deploy"

on:
  push:
    paths:
      - ".github/workflows/**"
      - "src/**"
      - "build.gradle.kts"
      - "settings.gradle.kts"
      - "Dockerfile"
    branches:
      - "main"
      - "app1"
      - "app2"
      - "app3"
      - "app4"
      - "app5"
      - "app6"
      - "app7"

env:
  APP_NAME: grr-test
  APP_COUNT: 7  # Î∞∞Ìè¨Ìï† app Í∞úÏàò (app1 ~ app7)

jobs:
  makeTagAndRelease:
    runs-on: ubuntu-latest
    outputs:
      tag_name: ${{ steps.create_tag.outputs.new_tag }}
    steps:
      - uses: actions/checkout@v4

      - name: Create Tag
        id: create_tag
        uses: mathieudutour/github-tag-action@v6.1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.create_tag.outputs.new_tag }}
          release_name: Release ${{ steps.create_tag.outputs.new_tag }}
          body: ${{ steps.create_tag.outputs.changelog }}
          draft: false
          prerelease: false

  buildImageAndPush:
    name: ÎèÑÏª§ Ïù¥ÎØ∏ÏßÄ ÎπåÎìúÏôÄ Ìë∏Ïãú
    needs: makeTagAndRelease
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Docker Buildx ÏÑ§Ïπò
        uses: docker/setup-buildx-action@v2

      - name: Î†àÏßÄÏä§Ìä∏Î¶¨ Î°úÍ∑∏Ïù∏
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: set lower case owner name
        run: echo "OWNER_LC=${OWNER,,}" >> $GITHUB_ENV
        env:
          OWNER: "${{ github.repository_owner }}"

      - name: application-secret.yml ÏÉùÏÑ±
        env:
          APPLICATION_SECRET: ${{ secrets.APPLICATION_SECRET_YML }}
        run: echo "$APPLICATION_SECRET" > src/main/resources/application-secret.yml

      - name: ÎπåÎìú Ïï§ Ìë∏Ïãú
        uses: docker/build-push-action@v3
        with:
          context: .
          push: true
          cache-from: type=registry,ref=ghcr.io/${{ env.OWNER_LC }}/${{ env.APP_NAME }}:cache-${{ github.ref_name }}
          cache-to: type=registry,ref=ghcr.io/${{ env.OWNER_LC }}/${{ env.APP_NAME }}:cache-${{ github.ref_name }},mode=max
          tags: |
            ghcr.io/${{ env.OWNER_LC }}/${{ env.APP_NAME }}:${{ needs.makeTagAndRelease.outputs.tag_name }},
            ghcr.io/${{ env.OWNER_LC }}/${{ env.APP_NAME }}:latest

  deploy:
    name: Ïø†Î≤ÑÎÑ§Ìã∞Ïä§ Î∞∞Ìè¨
    needs: [ makeTagAndRelease, buildImageAndPush ]
    runs-on: ubuntu-latest
    steps:
      - uses: azure/k8s-set-context@v2
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.KUBE_CONFIG }}

      - name: set lower case owner name Î∞è Î≥ÄÏàò ÏÑ§Ï†ï
        run: |
          echo "OWNER_LC=${OWNER,,}" >> $GITHUB_ENV
          echo "BRANCH_NAME=${GITHUB_REF_NAME}" >> $GITHUB_ENV
          echo "APP_COUNT=7" >> $GITHUB_ENV  # <-- Ïó¨Í∏∞ ÏßÅÏ†ë ÏÑ§Ï†ï
        env:
          OWNER: "${{ github.repository_owner }}"
          GITHUB_REF_NAME: ${{ github.ref_name }}

      - name: Ïù¥ÎØ∏ÏßÄ ÏóÖÎç∞Ïù¥Ìä∏ Î∞è Ï∂úÎ†•
        env:
          IMAGE_TAG: ghcr.io/${{ env.OWNER_LC }}/${{ env.APP_NAME }}:${{ needs.makeTagAndRelease.outputs.tag_name }}
        run: |
          if [ "$BRANCH_NAME" = "main" ]; then
            for i in $(seq 1 "$APP_COUNT"); do
              DEPLOYMENT_NAME="${APP_NAME}-app${i}-deployment"
              CONTAINER_NAME="${APP_NAME}-app${i}"
              echo "üîç Checking $DEPLOYMENT_NAME ..."
              if kubectl get deployment "$DEPLOYMENT_NAME" > /dev/null 2>&1; then
                echo "‚úÖ $DEPLOYMENT_NAME exists. Updating image..."
                kubectl set image deployment/"$DEPLOYMENT_NAME" "$CONTAINER_NAME"="$IMAGE_TAG"
              else
                echo "‚ö†Ô∏è  $DEPLOYMENT_NAME not found. Skipping."
              fi
            done
          else
            DEPLOYMENT_NAME="${APP_NAME}-${BRANCH_NAME}-deployment"
            CONTAINER_NAME="${APP_NAME}-${BRANCH_NAME}"
            echo "üîç Checking $DEPLOYMENT_NAME ..."
            if kubectl get deployment "$DEPLOYMENT_NAME" > /dev/null 2>&1; then
              echo "‚úÖ $DEPLOYMENT_NAME exists. Updating image..."
              kubectl set image deployment/"$DEPLOYMENT_NAME" "$CONTAINER_NAME"="$IMAGE_TAG"
            else
              echo "‚ö†Ô∏è  $DEPLOYMENT_NAME not found. Skipping."
            fi
          fi
